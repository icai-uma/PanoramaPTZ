
#
# Below are code snippets taken from the LITIV framework to form a standalone
# project for the virtual ptz library and executables.
#
# Copyright 2015 Pierre-Luc St-Charles; visit https://github.com/plstcharles/litiv
# for the full version and licensing information (provided under Apache 2.0 terms)
#

cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/build/bin)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")
include(FrameworkUtils)
include(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_SHA1)
#set(CMAKE_VERBOSE_MAKEFILE ON)

project(vptz_framework)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
set(LITIV_FRAMEWORK_VERSION_MAJOR 0)
set(LITIV_FRAMEWORK_VERSION_MINOR 3)
set(LITIV_FRAMEWORK_VERSION_PATCH 7)
set(LITIV_FRAMEWORK_VERSION ${LITIV_FRAMEWORK_VERSION_MAJOR}.${LITIV_FRAMEWORK_VERSION_MINOR}.${LITIV_FRAMEWORK_VERSION_PATCH})
set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DEBUG>)
set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>:_DEBUG>)

option(USE_FAST_MATH "Enable fast math optimizations" OFF)

### OPENCV CHECK
find_package(OpenCV 3.0 REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${OpenCV_LIBRARY_DIRS})
add_definitions(${OpenCV_DEFINITIONS})

### GLSL CHECK
find_package(GLFW)
if(NOT GLFW_FOUND)
    find_package(FREEGLUT REQUIRED)
else(GLFW_FOUND)
    find_package(FREEGLUT)
endif(NOT GLFW_FOUND)
find_package(OpenGL REQUIRED)
find_package(GLEW REQUIRED)
set_eval(USE_GLSL ((${GLFW_FOUND} OR ${FREEGLUT_FOUND}) AND ${OPENGL_FOUND} AND ${GLEW_FOUND}))
if(NOT USE_GLSL)
    message(FATAL "Could not find all required OpenGL libraries.")
else(USE_GLSL)
    if(${GLFW_FOUND})
        set(USE_GLFW 1 CACHE BOOL "Use GLFW as the OpenGL window manager")
        set(USE_FREEGLUT 0 CACHE BOOL "Use FREEGLUT as the OpenGL window manager")
    elseif(${FREEGLUT_FOUND})
        set(USE_GLFW 0 CACHE BOOL "Use GLFW as the OpenGL window manager")
        set(USE_FREEGLUT 1 CACHE BOOL "Use FREEGLUT as the OpenGL window manager")
    endif(${GLFW_FOUND})
    if(${USE_GLFW} EQUAL ${USE_FREEGLUT})
        message(FATAL_ERROR "Need to select one window manager.")
    endif(${USE_GLFW} EQUAL ${USE_FREEGLUT})
    if(USE_GLFW)
        include_directories(${GLFW_INCLUDE_DIRS})
    elseif(USE_FREEGLUT)
        include_directories(${FREEGLUT_INCLUDE_DIR})
    endif(USE_GLFW)
    include_directories(${OpenGL_INCLUDE_DIRS})
    include_directories(${GLEW_INCLUDE_DIRS})
    set(TARGET_GL_VER_MAJOR 3 CACHE STRING "Target OpenGL profile major version")
    set(TARGET_GL_VER_MINOR 0 CACHE STRING "Target OpenGL profile minor version")
    option(GLEW_EXPERIMENTAL "Use experimental GLEW features" ON)
endif(NOT USE_GLSL)

if(CMAKE_COMPILER_IS_GNUCXX)
    if(NOT CMAKE_CROSSCOMPILING)
        add_definitions(-march=native)
    endif(NOT CMAKE_CROSSCOMPILING)
    if(USE_FAST_MATH)
        add_definitions(-ffast-math)
    endif(USE_FAST_MATH)
    add_definitions(-Wall)
    add_definitions(-Wextra)
    add_definitions(-Wshadow)
    add_definitions(-Wfatal-errors)
elseif(MSVC AND WIN32)
    if(USE_FAST_MATH)
        add_definitions(/fp:fast)
    else(NOT USE_FAST_MATH)
        add_definitions(/fp:precise)
    endif(USE_FAST_MATH)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(/openmp)
    add_definitions(/arch:AVX) # check performance difference? vs 387? @@@
    add_definitions(/Wall)
else()
    message(SEND_ERROR "Unsupported compiler/platform")
endif()
if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-Werror)
    add_definitions(-pedantic-errors)
elseif(MSVC AND WIN32)
    #add_definitions(/WX)
else()
    message(SEND_ERROR "Unsupported compiler/platform")
endif()

add_subdirectory(modules)
add_subdirectory(execs)
